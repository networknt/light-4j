{
  "$schema" : "http://json-schema.org/draft-07/schema#",
  "type" : "object",
  "required" : [ "enabled", "auditOnError", "auditStackTrace", "reportHandlerDuration", "handlerMetricsLogLevel", "basePath", "handlers", "defaultHandlers", "paths" ],
  "properties" : {
    "enabled" : {
      "type" : "boolean",
      "description" : "Indicate if the handler middleware is enabled or not.",
      "default" : true
    },
    "auditOnError" : {
      "type" : "boolean",
      "description" : "Configuration for the LightHttpHandler. The handler is the base class  for all middleware, server and health handlers\nset the Status Object in the AUDIT_INFO, for auditing purposes\ndefault, if not set:false"
    },
    "auditStackTrace" : {
      "type" : "boolean",
      "description" : "set the StackTrace in the AUDIT_INFO, for auditing purposes\ndefault, if not set:false"
    },
    "reportHandlerDuration" : {
      "type" : "boolean",
      "description" : "Indicate if the handler middleware should report handler duration."
    },
    "handlerMetricsLogLevel" : {
      "type" : "string",
      "description" : "The log level for the handler metrics.",
      "default" : "DEBUG",
      "pattern" : "^(TRACE|DEBUG|INFO|WARN|ERROR)$"
    },
    "basePath" : {
      "type" : "string",
      "description" : "Base Path of the API endpoints",
      "default" : "/"
    },
    "handlers" : {
      "type" : "array",
      "description" : "------------------------------------------------------------------------------\nSupport individual handler chains for each separate endpoint. It allows framework\nhandlers like health check, server info to bypass majority of the middleware handlers\nand allows mixing multiple frameworks like OpenAPI and GraphQL in the same instance.\n\nhandlers  --  list of handlers to be used across chains in this microservice\n              including the routing handlers for ALL endpoints\n          --  format: fully qualified handler class name@optional:given name\nchains    --  allows forming of [1..N] chains, which could be wholly or\n              used to form handler chains for each endpoint\n              ex.: default chain below, reused partially across multiple endpoints\npaths     --  list all the paths to be used for routing within the microservice\n          ----  path: the URI for the endpoint (ex.: path: '/v1/pets')\n          ----  method: the operation in use (ex.: 'post')\n          ----  exec: handlers to be executed -- this element forms the list and\n                      the order of execution for the handlers\n\nIMPORTANT NOTES:\n- to avoid executing a handler, it has to be removed/commented out in the chain\n  or change the enabled:boolean to false for a middleware handler configuration.\n- all handlers, routing handler included, are to be listed in the execution chain\n- for consistency, give a name to each handler; it is easier to refer to a name\n  vs a fully qualified class name and is more elegant\n- you can list in chains the fully qualified handler class names, and avoid using the\n  handlers element altogether\n------------------------------------------------------------------------------",
      "items" : {
        "type" : "string"
      }
    },
    "defaultHandlers" : {
      "type" : "array",
      "description" : "If there is no matched path, then it goes here first. If this is not set, then an error\nwill be returned.",
      "items" : {
        "type" : "string"
      }
    },
    "paths" : {
      "type" : "array",
      "items" : {
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "description" : "The path to match",
            "pattern" : "^/.*"
          },
          "method" : {
            "type" : "string",
            "description" : "The HTTP method to match",
            "pattern" : "(?i)^(GET|POST|PUT|DELETE|PATCH|OPTIONS|HEAD|TRACE|CONNECT)$"
          },
          "exec" : {
            "type" : "array",
            "description" : "The list of handlers",
            "items" : {
              "type" : "string"
            }
          }
        }
      }
    }
  }
}