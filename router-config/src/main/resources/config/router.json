{
  "$schema" : "http://json-schema.org/draft-07/schema#",
  "type" : "object",
  "required" : [ "http2Enabled", "httpsEnabled", "maxRequestTime", "pathPrefixMaxRequestTime", "connectionsPerThread", "maxQueueSize", "softMaxConnectionsPerThread", "rewriteHostHeader", "reuseXForwarded", "maxConnectionRetries", "preResolveFQDN2IP", "hostWhiteList", "serviceIdQueryParameter", "urlRewriteRules", "methodRewriteRules", "queryParamRewriteRules", "headerRewriteRules", "metricsInjection", "metricsName" ],
  "properties" : {
    "http2Enabled" : {
      "type" : "boolean",
      "description" : "As this router is built to support discovery and security for light-4j services,\nthe outbound connection is always HTTP 2.0 with TLS enabled.\nIf HTTP 2.0 protocol will be accepted from incoming request.",
      "default" : true
    },
    "httpsEnabled" : {
      "type" : "boolean",
      "description" : "If TLS is enabled when accepting incoming request. Should be true on test and prod.",
      "default" : true
    },
    "maxRequestTime" : {
      "type" : "integer",
      "description" : "Max request time in milliseconds before timeout to the server. This is the global setting shared\nby all backend services if they don't have service specific timeout.",
      "default" : 1000
    },
    "pathPrefixMaxRequestTime" : {
      "type" : "object",
      "description" : "If a particular downstream service has different timeout than the above global definition, you can\nadd the path prefix and give it another timeout in millisecond. For downstream APIs not defined here,\nthey will use the global timeout defined in router.maxRequestTime. The value is a map with key is the\npath prefix and value is the timeout.\nJSON format:\nrouter.pathPrefixMaxRequestTime: {\"/v1/address\":5000,\"/v2/address\":10000,\"/v3/address\":30000,\"/v1/pets/{petId}\":5000}\nYAML format:\nrouter.pathPrefixMaxRequestTime:\n  /v1/address: 5000\n  /v2/address: 10000\n  /v3/address: 30000\n  /v1/pets/{petId}: 5000",
      "additionalProperties" : {
        "type" : "integer"
      }
    },
    "connectionsPerThread" : {
      "type" : "integer",
      "description" : "Connections per thread.",
      "default" : 10
    },
    "maxQueueSize" : {
      "type" : "integer",
      "description" : "The max queue size for the requests if there is no connection to the downstream API in the connection pool.\nThe default value is 0 that means there is queued requests. As we have maxConnectionRetries, there is no\nneed to use the request queue to increase the memory usage. It should only be used when you see 503 errors\nin the log after maxConnectionRetries to accommodate slow backend API."
    },
    "softMaxConnectionsPerThread" : {
      "type" : "integer",
      "description" : "Soft max connections per thread.",
      "default" : 5
    },
    "rewriteHostHeader" : {
      "type" : "boolean",
      "description" : "Rewrite Host Header with the target host and port and write X_FORWARDED_HOST with original host",
      "default" : true
    },
    "reuseXForwarded" : {
      "type" : "boolean",
      "description" : "Reuse XForwarded for the target XForwarded header"
    },
    "maxConnectionRetries" : {
      "type" : "integer",
      "description" : "Max Connection Retries",
      "default" : 3
    },
    "preResolveFQDN2IP" : {
      "type" : "boolean",
      "description" : "Pre-resolve FQDN to IP for downstream connections. Default to false in most case, and it should be\nonly used when the downstream FQDN is a load balancer for multiple real API servers."
    },
    "hostWhiteList" : {
      "type" : "array",
      "description" : "allowed host list. Use Regex to do wildcard match",
      "items" : {
        "type" : "string"
      }
    },
    "serviceIdQueryParameter" : {
      "type" : "boolean",
      "description" : "support serviceId in the query parameter for routing to overwrite serviceId in header routing.\nby default, it is false and should not be used unless you are dealing with a legacy client that\ndoes not support header manipulation. Once this flag is true, we are going to overwrite the header\nservice_id derived with other handlers from prefix, path, endpoint etc."
    },
    "urlRewriteRules" : {
      "type" : "array",
      "description" : "URL rewrite rules, each line will have two parts: the regex patten and replace string separated\nwith a space. The light-router has service discovery for host routing, so whe working on the\nurl rewrite rules, we only need to create about the path in the URL.\nTest your rules at https://www.freeformatter.com/java-regex-tester.html\nHere are some examples in values.yml\nYAML format:\nrouter.urlRewriteRules:\n /listings/123 to /listing.html?listing=123\n - /listings/(.*)$ /listing.html?listing=$1\n /ph/uat/de-asia-ekyc-service/v1 to /uat-de-asia-ekyc-service/v1\n - /ph/uat/de-asia-ekyc-service/v1 /uat-de-asia-ekyc-service/v1\n /tutorial/linux/wordpress/file1 to /tutorial/linux/cms/file1.php\n - (/tutorial/.*)/wordpress/(\\w+)\\.?.*$ $1/cms/$2.php\nJSON format:\nrouter.urlRewriteRules: [\"/listings/(.*)$ /listing.html?listing=$1\",\"/ph/uat/de-asia-ekyc-service/v1 /uat-de-asia-ekyc-service/v1\",\"(/tutorial/.*)/wordpress/(\\\\w+)\\\\.?.*$ $1/cms/$2.php\"]",
      "items" : {
        "type" : "string"
      }
    },
    "methodRewriteRules" : {
      "type" : "array",
      "description" : "Method rewrite rules for legacy clients that do not support DELETE, PUT, and PATCH HTTP methods to\nsend a request with GET and POST instead. The gateway will rewrite the method from GET to DELETE or\nfrom POST to PUT or PATCH. This will be set up at the endpoint level to limit the application.\nThe format of the rule will be \"endpoint-pattern source-method target-method\". Please refer to test\nvalues.yml for examples. The endpoint-pattern is a pattern in OpenAPI specification. Examples:\nYAML format:\nrouter.methodRewriteRules:\n rewrite POST to PUT for path /v2/address\n - /v2/address POST PUT\n rewrite POST to PATCH for path /v1/address\n - /v1/address POST PATCH\n rewrite GET to DELETE for path /v1/address\n - /v1/pets/{petId}/address GET DELETE\nJSON format:\nrouter.methodRewriteRules: [\"/v2/address POST PUT\",\"/v1/address POST PATCH\",\"/v1/address GET DELETE\",\"/v1/pets/{petId} GET DELETE\"]\nNote: you cannot rewrite a method with a body to a method without a body or vice versa.",
      "items" : {
        "type" : "string"
      }
    },
    "queryParamRewriteRules" : {
      "type" : "array",
      "description" : "Query parameter rewrite rules for client applications that send different query parameter keys or values\nthan the target server expecting. When overwriting a value, the key must be specified in order to\nidentify the right query parameter. If only the oldK and newK are specified, the router will rewrite the\nquery parameter key oldK with different key newK and keep the value.\nThe format of the rules will be a map with the path as the key. Please refer to test values.yml for\nexamples. You can define a list of rules under the same path. Here are some examples in values.yml\nYAML format:\nrouter.queryParamRewriteRules:\n /v1/address\n - oldK: oldV\n   newK: newV\n /v1/pets/{petId}\n - oldK: oldV\n   newK: newV\n - oldK: oldV2\n   newK: newV2\nJSON format:\nrouter.queryParamRewriteRules: {\"/v1/address\":[{\"oldK\":\"oldV\",\"newK\":\"newV\"}],\"/v1/pets/{petId}\":[{\"oldK\":\"oldV\",\"newK\":\"newV\"},{\"oldK\":\"oldV2\",\"newK\":\"newV2\"}]}",
      "items" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        }
      }
    },
    "headerRewriteRules" : {
      "type" : "array",
      "description" : "Header rewrite rules for client applications that send different header keys or values than the target\nserver expecting. When overwriting a value, the key must be specified in order to identify the right\nheader. If only the oldK and newK are specified, the router will rewrite the header key oldK with different\nkey newK and keep the value.\nThe format of the rule will be a map with the path as the key. Please refer to test values.yml for\nexamples. You can define a list of rules under the same path. Here are some examples in values.yml\nYAML format:\nrouter.headerRewriteRules:\n /v1/address:\n - oldK: oldV\n   newK: newV\n /v1/pets/{petId}:\n - oldK: oldV\n   newK: newV\n - oldK: oldV2\n   newK: newV2\nJSON format:\nrouter.headerRewriteRules: {\"/v1/address\":[{\"oldK\":\"oldV\",\"newK\":\"newV\"}],\"/v1/pets/{petId}\":[{\"oldK\":\"oldV\",\"newK\":\"newV\"},{\"oldK\":\"oldV2\",\"newK\":\"newV2\"}]}",
      "items" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        }
      }
    },
    "metricsInjection" : {
      "type" : "boolean",
      "description" : "When RouterHandler is used in the http-sidecar or light-gateway, it can collect the metrics info for the\ntotal response time of the downstream API. With this value injected, users can quickly determine how much\ntime the http-sidecar or light-gateway handlers spend and how much time the downstream API spends, including\nthe network latency. By default, it is false, and metrics will not be collected and injected into the metrics\nhandler configured in the request/response chain."
    },
    "metricsName" : {
      "type" : "string",
      "description" : "When the metrics info is injected into the metrics handler, we need to pass a metric name to it so that the\nmetrics info can be categorized in a tree structure under the name. By default, it is router-response, and\nusers can change it.",
      "default" : "router-response"
    }
  }
}