{
  "$schema" : "http://json-schema.org/draft-07/schema#",
  "type" : "object",
  "required" : [ "enabled", "enableAD", "allowAnonymous", "allowBearerToken", "users" ],
  "properties" : {
    "enabled" : {
      "type" : "boolean",
      "description" : "Enable Basic Authentication Handler, default is true."
    },
    "enableAD" : {
      "type" : "boolean",
      "description" : "Enable Ldap Authentication, default is true.",
      "default" : true
    },
    "allowAnonymous" : {
      "type" : "boolean",
      "description" : "Do we allow the anonymous to pass the authentication and limit it with some paths\nto access? Default is false, and it should only be true in client-proxy."
    },
    "allowBearerToken" : {
      "type" : "boolean",
      "description" : "Allow the Bearer OAuth 2.0 token authorization to pass to the next handler with paths\nauthorization defined under username bearer. This feature is used in proxy-client\nthat support multiple clients with different authorizations.\n"
    },
    "users" : {
      "type" : "object",
      "description" : "usernames and passwords in a list, the password can be encrypted like user2 in test.\nAs we are supporting multiple users, so leave the passwords in this file with users.\nFor each user, you can specify a list of optional paths that this user is allowed to\naccess. A special user anonymous can be used to set the paths for client without an\nauthorization header. The paths are optional and used for proxy only to authorize.\n",
      "additionalProperties" : {
        "type" : "object",
        "properties" : {
          "password" : {
            "type" : "string",
            "description" : "UserAuth password"
          },
          "paths" : {
            "type" : "array",
            "description" : "The different paths that will be valid for this UserAuth",
            "items" : {
              "type" : "string"
            }
          },
          "username" : {
            "type" : "string",
            "description" : "UserAuth username"
          }
        }
      }
    }
  }
}
