{
  "$schema" : "http://json-schema.org/draft-07/schema#",
  "type" : "object",
  "required" : [ "enableVerifyJwt", "enableVerifySwt", "swtClientIdHeader", "swtClientSecretHeader", "enableExtractScopeToken", "enableVerifyScope", "skipVerifyScopeWithoutSpec", "ignoreJwtExpiry", "enableH2c", "enableMockJwt", "enableRelaxedKeyValidation", "jwt", "logJwtToken", "logClientUserScope", "enableJwtCache", "jwtCacheFullSize", "bootstrapFromKeyService", "providerId", "skipPathPrefixes", "passThroughClaims" ],
  "properties" : {
    "enableVerifyJwt" : {
      "type" : "boolean",
      "description" : "Enable the JWT verification flag. The JwtVerifierHandler will skip the JWT token verification\nif this flag is false. It should only be set to false on the dev environment for testing\npurposes. If you have some endpoints that want to skip the JWT verification, you can put the\nrequest path prefix in skipPathPrefixes.",
      "default" : true
    },
    "enableVerifySwt" : {
      "type" : "boolean",
      "description" : "Enable the SWT verification flag. The SwtVerifierHandler will skip the SWT token verification\nif this flag is false. It should only be set to false on the dev environment for testing\npurposes. If you have some endpoints that want to skip the SWT verification, you can put the\nrequest path prefix in skipPathPrefixes.",
      "default" : true
    },
    "swtClientIdHeader" : {
      "type" : "string",
      "description" : "swt clientId header name. When light-gateway is used and the consumer app does not want to save\nthe client secret in the configuration file, it can be passed in the header.",
      "default" : "swt-client"
    },
    "swtClientSecretHeader" : {
      "type" : "string",
      "description" : "swt clientSecret header name. When light-gateway is used and the consumer app does not want to save\nthe client secret in the configuration file, it can be passed in the header.",
      "default" : "swt_secret"
    },
    "enableExtractScopeToken" : {
      "type" : "boolean",
      "description" : "Extract JWT scope token from the X-Scope-Token header and validate the JWT token",
      "default" : true
    },
    "enableVerifyScope" : {
      "type" : "boolean",
      "description" : "Enable JWT scope verification. This flag is valid when enableVerifyJwt is true. When using the\nlight gateway as a centralized gateway without backend API specifications, you can still enable\nthis flag to allow the admin endpoints to have scopes verified. And all backend APIs without\nspecifications skip the scope verification if the spec does not exist with the skipVerifyScopeWithoutSpec\nflag to true. Also, you need to have the openapi.yml specification file in the config folder to\nenable it, as the scope verification compares the scope from the JWT token and the scope in the\nendpoint specification.",
      "default" : true
    },
    "skipVerifyScopeWithoutSpec" : {
      "type" : "boolean",
      "description" : "Users should only use this flag in a shared light gateway if the backend API specifications are\nunavailable in the gateway config folder. If this flag is true and the enableVerifyScope is true,\nthe security handler will invoke the scope verification for all endpoints. However, if the endpoint\ndoesn't have a specification to retrieve the defined scopes, the handler will skip the scope verification."
    },
    "ignoreJwtExpiry" : {
      "type" : "boolean",
      "description" : "If set true, the JWT verifier handler will pass if the JWT token is expired already. Unless\nyou have a strong reason, please use it only on the dev environment if your OAuth 2 provider\ndoesn't support long-lived token for dev environment or test automation."
    },
    "enableH2c" : {
      "type" : "boolean",
      "description" : "set true if you want to allow http 1/1 connections to be upgraded to http/2 using the UPGRADE method (h2c).\nBy default, this is set to false for security reasons. If you choose to enable it make sure you can handle http/2 w/o tls.",
      "default" : true
    },
    "enableMockJwt" : {
      "type" : "boolean",
      "description" : "User for test only. should be always be false on official environment."
    },
    "enableRelaxedKeyValidation" : {
      "type" : "boolean",
      "default" : true
    },
    "jwt" : {
      "type" : "object",
      "description" : "JWT signature public certificates. kid and certificate path mappings.",
      "properties" : {
        "clockSkewInSeconds" : {
          "type" : "integer"
        },
        "certificate" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "keyResolver" : {
          "type" : "string",
          "description" : "Key distribution server standard: JsonWebKeySet for other OAuth 2.0 provider| X509Certificate for light-oauth2"
        }
      }
    },
    "logJwtToken" : {
      "type" : "boolean",
      "description" : "Enable or disable JWT token logging for audit. This is to log the entire token\nor choose the next option that only logs client_id, user_id and scope.",
      "default" : true
    },
    "logClientUserScope" : {
      "type" : "boolean",
      "description" : "Enable or disable client_id, user_id and scope logging if you don't want to log\nthe entire token. Choose this option or the option above.",
      "default" : true
    },
    "enableJwtCache" : {
      "type" : "boolean",
      "description" : "Enable JWT token cache to speed up verification. This will only verify expired time\nand skip the signature verification as it takes more CPU power and a long time. If\neach request has a different jwt token, like authorization code flow, this indicator\nshould be turned off. Otherwise, the cached jwt will only be removed after 15 minutes\nand the cache can grow bigger if the number of requests is very high. This will cause\nmemory kill in a Kubernetes pod if the memory setting is limited.",
      "default" : true
    },
    "jwtCacheFullSize" : {
      "type" : "integer",
      "description" : "If enableJwtCache is true, then an error message will be shown up in the log if the\ncache size is bigger than the jwtCacheFullSize. This helps the developers to detect\ncache problem if many distinct tokens flood the cache in a short period of time. If\nyou see JWT cache exceeds the size limit in logs, you need to turn off the enableJwtCache\nor increase the cache full size to a bigger number from the default 100."
    },
    "bootstrapFromKeyService" : {
      "type" : "boolean",
      "description" : "If you are using light-oauth2, then you don't need to have oauth subfolder for public\nkey certificate to verify JWT token, the key will be retrieved from key endpoint once\nthe first token is arrived. Default to false for dev environment without oauth2 server\nor official environment that use other OAuth 2.0 providers.",
      "default" : true
    },
    "providerId" : {
      "type" : "string",
      "description" : "Used in light-oauth2 and oauth-kafka key service for federated deployment. Each instance\nwill have a providerId, and it will be part of the kid to allow each instance to get the\nJWK from other instance based on the providerId in the kid."
    },
    "skipPathPrefixes" : {
      "type" : "array",
      "description" : "Define a list of path prefixes to skip the security to ease the configuration for the\nhandler.yml so that users can define some endpoint without security even through it uses\nthe default chain. This is particularly useful in the light-gateway use case as the same\ninstance might be shared with multiple consumers and providers with different security\nrequirement. The format is a list of strings separated with commas or a JSON list in\nvalues.yml definition from config server, or you can use yaml format in this file.",
      "items" : {
        "type" : "string"
      }
    },
    "passThroughClaims" : {
      "type" : "object",
      "description" : "When light-gateway or http-sidecar is used for security, sometimes, we need to pass some\nclaims from the JWT or SWT to the backend API for further verification or audit. You can\nselect some claims to pass to the backend API with HTTP headers. The format is a map of\nclaim in the token and a header name that the downstream API is expecting. You can use\nboth JSON or YAML format.\nWhen SwtVerifyHandler is used, the claim names are in https://github.com/networknt/light-4j/blob/master/client/src/main/java/com/networknt/client/oauth/TokenInfo.java\nWhen JwtVerifyHandler is used, the claim names is the JwtClaims claimName.\nYAML\nsecurity.passThroughClaims:\n  clientId: client_id\n  tokenType: token_type\nJSON\nsecurity.passThroughClaims: {\"clientId\":\"client_id\",\"tokenType\":\"token_type\"}",
      "additionalProperties" : {
        "type" : "string"
      }
    }
  }
}
