{
  "$schema" : "http://json-schema.org/draft-07/schema#",
  "type" : "object",
  "required" : [ "consulUrl", "consulToken", "maxReqPerConn", "deregisterAfter", "checkInterval", "tcpCheck", "httpCheck", "ttlCheck", "enableHttp2", "wait", "timeoutBuffer", "connectionTimeout", "requestTimeout", "reconnectInterval", "reconnectJitter", "lookupInterval", "maxAttemptsBeforeShutdown", "shutdownIfThreadFrozen" ],
  "properties" : {
    "consulUrl" : {
      "type" : "string",
      "description" : "Consul URL for accessing APIs"
    },
    "consulToken" : {
      "type" : "string",
      "description" : "access token to the consul server",
      "default" : "the_one_ring"
    },
    "maxReqPerConn" : {
      "type" : "integer",
      "description" : "number of requests before reset the shared connection.",
      "default" : 1000000
    },
    "deregisterAfter" : {
      "type" : "string",
      "description" : "deregister the service after the amount of time after health check failed.",
      "default" : "2m",
      "pattern" : "^\\d+[smh]$"
    },
    "checkInterval" : {
      "type" : "string",
      "description" : "health check interval for TCP or HTTP check. Or it will be the TTL for TTL check. Every 10 seconds,\nTCP or HTTP check request will be sent. Or if there is no heart beat request from service after 10 seconds,\nthen mark the service is critical.",
      "default" : "10s",
      "pattern" : "^\\d+[smh]$"
    },
    "tcpCheck" : {
      "type" : "boolean",
      "description" : "One of the following health check approach will be selected. Two passive (TCP and HTTP) and one active (TTL)\nenable health check TCP. Ping the IP/port to ensure that the service is up. This should be used for most of\nthe services with simple dependencies. If the port is open on the address, it indicates that the service is up."
    },
    "httpCheck" : {
      "type" : "boolean",
      "description" : "enable health check HTTP. A http get request will be sent to the service to ensure that 200 response status is\ncoming back. This is suitable for service that depending on database or other infrastructure services. You should\nimplement a customized health check handler that checks dependencies. i.e. if db is down, return status 400."
    },
    "ttlCheck" : {
      "type" : "boolean",
      "description" : "enable health check TTL. When this is enabled, Consul won't actively check your service to ensure it is healthy,\nbut your service will call check endpoint with heart beat to indicate it is alive. This requires that the service\nis built on top of light-4j and the above options are not available. For example, your service is behind NAT."
    },
    "enableHttp2" : {
      "type" : "boolean",
      "description" : "enable HTTP/2\nmust disable when using HTTP with Consul (mostly using local Consul agent), Consul only supports HTTP/1.1 when not using TLS\noptional to enable when using HTTPS with Consul, it will have better performance"
    },
    "wait" : {
      "type" : "string",
      "description" : "endpoints that support blocking will also honor a wait parameter specifying a maximum duration for the blocking request.\nThis is limited to 10 minutes.This value can be specified in the form of \"10s\" or \"5m\" (i.e., 10 seconds or 5 minutes,\nrespectively).",
      "default" : "600s",
      "pattern" : "^\\d+[smh]$"
    },
    "timeoutBuffer" : {
      "type" : "string",
      "description" : "Additional buffer of time to allow Consul to terminate the blocking query connection.",
      "default" : "5s",
      "pattern" : "^\\d+[smh]$"
    },
    "connectionTimeout" : {
      "type" : "integer",
      "description" : "Consul connection establishment timeout in seconds",
      "default" : 5
    },
    "requestTimeout" : {
      "type" : "integer",
      "description" : "Consul request completion timeout in seconds\nThis does NOT apply to Consul service discovery lookups (see the 'wait' and 'timeoutBuffer' properties for that)",
      "default" : 5
    },
    "reconnectInterval" : {
      "type" : "integer",
      "description" : "Time to wait in seconds between reconnect attempts when Consul connection fails",
      "default" : 2
    },
    "reconnectJitter" : {
      "type" : "integer",
      "description" : "A random number of seconds in between 0 and reconnectJitter added to reconnectInterval (to avoid too many reconnect\nrequests at one time)",
      "default" : 2
    },
    "lookupInterval" : {
      "type" : "integer",
      "description" : "Time in seconds between blocking queries with Consul. Consul blocking queries time should be set via the\n'lookupInterval' parameter in consul.yml, instead of 'registrySessionTimeout' in service.yml",
      "default" : 30
    },
    "maxAttemptsBeforeShutdown" : {
      "type" : "integer",
      "description" : "Max number of failed Consul connection or request attempts before self-termination\n-1 means an infinite # of attempts are allowed",
      "default" : -1
    },
    "shutdownIfThreadFrozen" : {
      "type" : "boolean",
      "description" : "Shuts down host application if any Consul lookup thread stops reporting a heartbeat for\n2 * ( lookupInterval + wait (in seconds) + timeoutBuffer (in seconds) ) seconds"
    }
  }
}