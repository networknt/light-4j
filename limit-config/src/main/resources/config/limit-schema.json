{
  "$schema" : "http://json-schema.org/draft-07/schema#",
  "type" : "object",
  "required" : [ "enabled", "concurrentRequest", "queueSize", "errorCode", "rateLimit", "headersAlwaysSet", "key", "server", "address", "client", "user", "clientIdKeyResolver", "addressKeyResolver", "userIdKeyResolver" ],
  "properties" : {
    "enabled" : {
      "type" : "boolean",
      "description" : "If this handler is enabled or not. It is disabled by default as this handle might be in\nmost http-sidecar, light-proxy and light-router instances. However, it should only be used\ninternally to throttle request for a slow backend service or externally for DDoS attacks."
    },
    "concurrentRequest" : {
      "type" : "integer",
      "description" : "Maximum concurrent requests allowed per second on the entire server. This is property is\nhere to keep backward compatible. New users should use the rateLimit property for config\nwith different keys and different time unit.",
      "default" : 2
    },
    "queueSize" : {
      "type" : "integer",
      "description" : "This property is kept to ensure backward compatibility. Please don't use it anymore. All\nrequests will return the rate limit headers with error messages after the limit is reached.",
      "default" : -1
    },
    "errorCode" : {
      "type" : "integer",
      "description" : "If the rate limit is exposed to the Internet to prevent DDoS attacks, it will return 503\nerror code to trick the DDoS client/tool to stop the attacks as it considers the server\nis down. However, if the rate limit is used internally to throttle the client requests to\nprotect a slow backend API, it will return 429 error code to indicate too many requests\nfor the client to wait a grace period to resent the request. By default, 429 is returned.",
      "default" : 429
    },
    "rateLimit" : {
      "type" : "array",
      "description" : "Default request rate limit 10 requests per second and 10000 quota per day. This is the\ndefault for the server shared by all the services. If the key is not server, then the\nquota is not applicable.\n10 requests per second limit and 10000 requests per day quota.",
      "items" : {
        "type" : "string"
      }
    },
    "headersAlwaysSet" : {
      "type" : "boolean",
      "description" : "By default, the rate limit headers are not set when limit is not reached. However, you can\noverwrite the behavior with true to write the three rate limit headers for 200 response in\norder for client to manage the flow of the requests."
    },
    "key" : {
      "type" : "string",
      "description" : "Key of the rate limit: server, address, client, user\nserver: The entire server has one rate limit key, and it means all users share the same.\naddress: The IP address is the key and each IP will have its rate limit configuration.\nclient: The client id in the JWT token so that we can give rate limit per client.\nuser: The user id in the JWT token so that we can set rate limit and quota based on user.",
      "default" : "server",
      "pattern" : "server|address|client|user"
    },
    "server" : {
      "type" : "object",
      "description" : "If server is the key, we can set up different rate limit per request path prefix.",
      "additionalProperties" : {
        "type" : "string"
      }
    },
    "address" : {
      "type" : "object",
      "description" : "If address is the key, we can set up different rate limit per address and optional per\npath or service for certain addresses. All other un-specified addresses will share the\nlimit defined in rateLimit.",
      "properties" : {
        "directMaps" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "client" : {
      "type" : "object",
      "description" : "If client is the key, we can set up different rate limit per client and optional per\npath or service for certain clients. All other un-specified clients will share the limit\ndefined in rateLimit. When client is select, the rate-limit handler must be after the\nJwtVerifierHandler so that the client_id can be retrieved from the auditInfo attachment.",
      "properties" : {
        "directMaps" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "user" : {
      "type" : "object",
      "description" : "If user is the key, we can set up different rate limit per user and optional per\npath or service for certain users. All other un-specified users will share the limit\ndefined in rateLimit. When user is select, the rate-limit handler must be after the\nJwtVerifierHandler so that the user_id can be retrieved from the auditInfo attachment.",
      "properties" : {
        "directMaps" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "clientIdKeyResolver" : {
      "type" : "string",
      "description" : "Client id Key Resolver.",
      "default" : "com.networknt.limit.key.JwtClientIdKeyResolver"
    },
    "addressKeyResolver" : {
      "type" : "string",
      "description" : "Address Key Resolver.",
      "default" : "com.networknt.limit.key.IpAddressKeyResolver"
    },
    "userIdKeyResolver" : {
      "type" : "string",
      "description" : "User id Key Resolver.",
      "default" : "com.networknt.limit.key.JwtUserIdKeyResolver"
    }
  }
}
