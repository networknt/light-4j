router.hostWhitelist:
  - 192.168.0.*
  - 10.1.2.*

router.urlRewriteRules:
  # test your regex rule at https://www.freeformatter.com/java-regex-tester.html#ad-output
  # /listings/123 to /listing.html?listing=123
  - /listings/(.*)$ /listing.html?listing=$1
  # /ph/uat/de-asia-ekyc-service/v1 to /uat-de-asia-ekyc-service/v1
  - /ph/uat/de-asia-ekyc-service/v1 /uat-de-asia-ekyc-service/v1
  # /tutorial/linux/wordpress/file1 to /tutorial/linux/cms/file1.php
  - (/tutorial/.*)/wordpress/(\w+)\.?.*$ $1/cms/$2.php

router.methodRewriteRules:
  # rewrite POST to PUT for path /v2/address
  - /v2/address POST PUT
  # rewrite POST to PATCH for path /v1/address
  - /v1/address POST PATCH
  # rewrite GET to DELETE for path /v1/address
  - /v1/address GET DELETE
  # rewrite GET to DELETE for path /v1/pets/{petId} with path parameters
  - /v1/pets/{petId} GET DELETE

router.queryParamRewriteRules:
  # rewrite query parameter key business-query to request-query and value value1 to value2 for /v1/address
  /v1/address:
    - oldK: business-query
      # overwrite the key
      newK: request-query
      oldV: value1
      # overwrite the value at the same time.
      newV: value2
    - oldK: module
      newK: mod
    - oldK: app-id
      oldV: esb
      newV: emb
  # rewrite query parameter value from old to new for key key1 for /v2/address
  /v2/address:
    # key must be here when you want to overwrite a value.
    - oldK: key1
      # only the value = old then we change to new.
      oldV: old
      newV: new
  # rewrite query parameter key from path to route for /v3/address
  /v3/address:
    - oldK: path
      newK: route
  # using path parameters
  /v1/pets/{petId}:
    - oldK: path
      newK: route

router.headerRewriteRules:
  # rewrite header key business-query to request-query and value value1 to value2 for /v1/address
  /v1/address:
    - oldK: business-query
      # overwrite the key
      newK: request-query
      oldV: value1
      # overwrite the value at the same time.
      newV: value2
    - oldK: module
      newK: mod
    - oldK: app-id
      oldV: esb
      newV: emb
  # rewrite header value from old to new for key key1 for /v2/address
  /v2/address:
    # key must be here when you want to overwrite a value.
    - oldK: key1
      # only the value = old then we change to new.
      oldV: old
      newV: new
  # rewrite header key from path to route for /v3/address
  /v3/address:
    - oldK: path
      newK: route
  # rewrite header key from path to route for /v1/pets/{petId}
  /v1/pets/{petId}:
    - oldK: path
      newK: route

# set the timeout per path for test cases
#router.pathPrefixMaxRequestTime:
#  /v1/address: 5000
#  /v2/address: 10000
#  /v3/address: 30000
router.pathPrefixMaxRequestTime: {"/v1/address":5000,"/v2/address":10000,"/v3/address":30000,"/v1/pets/{petId}": 5000}

# client.yml
# test configuration for the TokenHandler with multiple OAuth 2.0 providers.
client.multipleAuthServers: true
client.tokenCcServiceIdAuthServers:
  service1:
    server_url: https://localhost:7771
    enableHttp2: true
    uri: /oauth1/token
    client_id: f7d42348-c647-4efb-a52d-4c5787421e72
    client_secret: f6h1FTI8Q3-7UScPZDzfXA
    scope:
      - petstore.r
      - petstore.w
  service2:
    server_url: https://localhost:7772
    enableHttp2: true
    uri: /oauth2/token
    client_id: f7d42348-c647-4efb-a52d-4c5787421e73
    client_secret: f6h1FTI8Q3-7UScPZDzfXA
    scope:
      - market.r
      - market.w

# pathPrefixService.yml
# pathPrefixService.mapping: /v1/address=party.address-1.0.0&/v2/address=party.address-2.0.0&/v1/contact=party.contact-1.0.0
pathPrefixService.mapping: {"/v1/address": "party.address-1.0.0", "/v2/address": "party.address-2.0.0", "/v1/contact": "party.contact-1.0.0"}

# pathService.yml
# pathService.mapping: /v1/address/{id}@get=party.address-1.0.0&/v2/address@get=party.address-2.0.0&/v1/contact@post=party.contact-1.0.0

# serviceDict.yml
# serviceDict.mapping: /v1/address@get=party.address-1.0.0&/v2/address@get=party.address-2.0.0&/v1/contact@post=party.contact-1.0.0

# oauthServer.yml
oauthServer.client_credentials: test1:test1pass,test2:test2pass
