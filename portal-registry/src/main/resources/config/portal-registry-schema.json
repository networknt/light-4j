{
  "$schema" : "http://json-schema.org/draft-07/schema#",
  "type" : "object",
  "required" : [ "portalUrl", "portalToken", "maxReqPerConn", "deregisterAfter", "checkInterval", "httpCheck", "ttlCheck", "healthPath" ],
  "properties" : {
    "portalUrl" : {
      "type" : "string",
      "description" : "Portal URL for accessing controller API. Default to lightapi.net public portal, and it can be pointed to a standalone\nlight-controller instance for testing in the same Kubernetes cluster or docker-compose.",
      "default" : "https://lightapi.net"
    },
    "portalToken" : {
      "type" : "string",
      "description" : "Bootstrap jwt token to access the light-controller. In most case, the pipeline will get the token from OAuth 2.0\nprovider during the deployment. And then pass the token to the container with an environment variable. The other\noption is to use the light-4j encyptor to encrypt token and put it into the values.yml in the config server. In\nthat case, you can use portalRegistry.portalToken as the key instead of the environment variable."
    },
    "maxReqPerConn" : {
      "type" : "integer",
      "description" : "number of requests before resetting the shared connection to work around HTTP/2 limitation",
      "default" : 1000000
    },
    "deregisterAfter" : {
      "type" : "integer",
      "description" : "De-register the service after the amount of time with health check failed. Once a health check is failed, the\nservice will be put into a critical state. After the deregisterAfter, the service will be removed from discovery.\nthe value is an integer in milliseconds. 1000 means 1 second and default to 2 minutes",
      "default" : 120000
    },
    "checkInterval" : {
      "type" : "integer",
      "description" : "health check interval for HTTP check. Or it will be the TTL for TTL check. Every 10 seconds, an HTTP check\nrequest will be sent from the light-portal controller. Or if there is no heartbeat TTL request from service\nafter 10 seconds, then mark the service is critical. The value is an integer in milliseconds",
      "default" : 10000
    },
    "httpCheck" : {
      "type" : "boolean",
      "description" : "enable health check HTTP. An HTTP get request will be sent to the service to ensure that 200 response status is\ncoming back. This is suitable for service that depending on the database or other infrastructure services. You should\nimplement a customized health check handler that checks dependencies. i.e. if DB is down, return status 400. This\nis the recommended configuration that allows the light-portal controller to poll the health info from each service."
    },
    "ttlCheck" : {
      "type" : "boolean",
      "description" : "The health check path implemented on the server. In most of the cases, it would be /health/ plus the serviceId;\nhowever, on a kubernetes cluster, it might be /health/liveness/ in order to differentiate from the /health/readiness/\nNote that we need to provide the leading and trailing slash in the path definition.",
      "default" : true
    },
    "healthPath" : {
      "type" : "string",
      "description" : "The health check path implemented on the server. In most of the cases, it would be /health/ plus the serviceId;\nhowever, on a kubernetes cluster, it might be /health/liveness/ in order to differentiate from the /health/readiness/\nNote that we need to provide the leading and trailing slash in the path definition.",
      "default" : "/health/"
    }
  }
}
