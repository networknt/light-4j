# Portal URL for accessing controller API. Default to lightapi.net public portal and it can be point to a standalone
# light-controller instance for testing in the same Kubernetes cluster or docker-compose.
portalUrl: https://localhost:8443
# number of requests before reset the shared connection to work around HTTP/2 limitation
maxReqPerConn: 1000000
# De-register the service after the amount of time with health check failed. Once a health check is failed, the
# service will be put into a critical state. After the deregisterAfter, the service will be removed from discovery.
deregisterAfter: 2m
# health check interval for HTTP check. Or it will be the TTL for TTL check. Every 10 seconds an HTTP check
# request will be sent from the light-portal controller. Or if there is no heart beat TTL request from service
# after 10 seconds, then mark the service is critical.
checkInterval: 10s
# enable health check HTTP. A http get request will be sent to the service to ensure that 200 response status is
# coming back. This is suitable for service that depending on database or other infrastructure services. You should
# implement a customized health check handler that checks dependencies. i.e. if db is down, return status 400. This
# is the recommended configuration that allows the light-portal controller to poll the health info from each service.
httpCheck: false
# enable health check TTL. When this is enabled, The light-portal controller won't actively check your service to
# ensure it is healthy, but your service will call check endpoint with heart beat to indicate it is alive. This
# requires that the service is built on top of light-4j and the httpCheck is not available. For example, your service
# is behind NAT. If you are running the service within your internal network and using the SaaS lightapi.net portal,
# this is the only option as our portal controller cannot access to your internal service to perform health check.
# We recommend deploying light-portal internally if you are running services within an internal network for efficiency.
ttlCheck: true
