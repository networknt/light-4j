---
# Rate Limit Handler Configuration

# If this handler is enabled or not. It is disabled by default as this handle might be in
# most http-sidecar, light-proxy and light-router instances. However, it should only be used
# internally to throttle request for a slow backend service or externally for DDoS attacks.
enabled: ${limit.enabled:true}
# Maximum concurrent requests allowed at a given time. If this number is exceeded, new requests
# will be queued. It must be greater than 1 and should be set based on your use case. Be aware
# it is concurrent requests not the number of request per second. Light-4j server can handle
# millions of request per seconds. With 2 concurrent requests, the petstore API can still handle
# hundreds or even thousands requests per second.
concurrentRequest: ${limit.concurrentRequest:1}
# Overflow request queue size. -1 means there is no limit on the queue size and this should
# only be used in the corporate network for throttling. For Internet facing service, set it
# to a small value to prevent DDoS attacks. New requests will be dropped with 503 response
# code returned if the queue is full.
queueSize: ${limit.queueSize:1}
# If the rate limit is exposed to the Internet to prevent DDoS attacks, it will return 503
# error code to trick the DDoS client/tool to stop the attacks as it considers the server
# is down. However, if the rate limit is used internally to throttle the client requests to
# protect a slow backend API, it will return 429 error code to indicate too many requests
# for the client to wait a grace period to resent the request. By default, 503 is returned.
errorCode: ${limit.errorCode:429}
# request rate limit: 10 1s 1000 1h
# 10 requests per second limit and 1000 requests per day quota.
rateLimit: 10/s 1000/d
# Key of the rate limit: server, address, client
# server: The entire server has one rate limit key, and it means all users share the same.
# address: The IP address is the key and each IP will have its rate limit configuration.
# client: The client id in the JWT token so that we can give rate limit per client.
# user: The user id in the JWT token so that we can set rate limit and quota based on user.
key: ${limit.key:server}
# Address specific rate limit if they don't follow the default rateLimit definition.
server:
  /v1/address: 10/s
  /v2/address: 1000/s
address:
  192.168.1.100: 10/h 1000/d
  192.168.1.101: 1000/s 1000000/d
  192.168.1.102:
    /v1/address: 10/s
    /v2/address: 100/s
client:
  f7d42348-c647-4efb-a52d-4c5787421e73: 100/m 10000/d
  f7d42348-c647-4efb-a52d-4c5787421e74: 10/m 1000/d
  f7d42348-c647-4efb-a52d-4c5787421e75:
    /v1/address: 10/s
    /v2/address: 100/s
user:
  alex@lightapi.net: 10/m 10000/d
  alice@lightapi.net: 20/m 20000/d
  albert@lightapi.net:
    /batch: 1000/m 1000000/d

# Client id Key Resolver.
clientIdKeyResolver: com.networknt.limit.key.JwtClientIdKeyResolver
# Ip Address Key Resolver.
addressKeyResolver: com.networknt.limit.key.RemoteAddressKeyResolver