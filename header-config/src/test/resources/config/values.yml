# header.yml
# if the handler is enabled or not
header.enabled: true
# this is a json format of list of strings
header.request.remove: ["header1", "header2"]
# this is a json format of map
header.request.update: {"key1": "value1", "key2": "value2"}
# this is a comma separated string that can be converted to a list of strings
header.response.remove: header1,header2
# this is a comma and colon separated string that represent a map.
header.response.update: key1:value1,key2:value2
# this is a yaml format that will be loaded as a map directly. use it if you
# are not use the config-server that requires only the string as the value.
# when using config-server, convert the following value into a JSON string.
header.pathPrefixHeader:
  /petstore:
    request:
      remove:
        - headerA
        - headerB
      update:
        keyA: valueA
        keyB: valueB
    response:
      remove:
        - headerC
        - headerD
      update:
        keyC: valueC
        keyD: valueD
  /market:
    request:
      remove:
        - headerE
        - headerF
      update:
        keyE: valueE
        keyF: valueF
    response:
      remove:
        - headerG
        - headerH
      update:
        keyG: valueG
        keyH: valueH
# The above yaml format can be converted to JSON string for config server. Comma and colon
# separated string is not suitable here as the map is so complicated to construct.
# header.pathPrefixHeader: {"/petstore":{"request":{"remove":["headerA","headerB"],"update":{"keyA":"valueA","keyB":"valueB"}},"response":{"remove":["headerC","headerD"],"update":{"keyC":"valueC","keyD":"valueD"}}},"/market":{"request":{"remove":["headerE","headerF"],"update":{"keyE":"valueE","keyF":"valueF"}},"response":{"remove":["headerG","headerH"],"update":{"keyG":"valueG","keyH":"valueH"}}}}
