{
  "$schema" : "http://json-schema.org/draft-07/schema#",
  "type" : "object",
  "required" : [ "enabled", "enableJVMMonitor", "serverProtocol", "serverHost", "serverPath", "serverPort", "serverName", "serverUser", "serverPass", "reportInMinutes", "productName", "sendScopeClientId", "sendCallerId", "sendIssuer", "issuerRegex" ],
  "properties" : {
    "enabled" : {
      "type" : "boolean",
      "description" : "If metrics handler is enabled or not. Default is true as long as one of the handlers is in the\nrequest/response chain.",
      "default" : true
    },
    "enableJVMMonitor" : {
      "type" : "boolean",
      "description" : "If metrics handler is enabled for JVM MBean or not. If enabled, the CPU and Memory usage will be\ncollected and send to the time series database."
    },
    "serverProtocol" : {
      "type" : "string",
      "description" : "Time series database server protocol. It can be http or https. Others can be added upon request.",
      "default" : "http"
    },
    "serverHost" : {
      "type" : "string",
      "description" : "Time series database or metrics server hostname.",
      "default" : "localhost"
    },
    "serverPath" : {
      "type" : "string",
      "description" : "Time series database or metrics server request path. It is optional and only some metrics handlers\nwill use it. For example, the Broadcom APM metrics server needs the path to access the agent.",
      "default" : "/apm/metricFeed"
    },
    "serverPort" : {
      "type" : "integer",
      "description" : "Time series database or metrics server port number.",
      "default" : 8086
    },
    "serverName" : {
      "type" : "string",
      "description" : "Time series database name.",
      "default" : "metrics"
    },
    "serverUser" : {
      "type" : "string",
      "description" : "Time series database or metrics server user.",
      "default" : "admin"
    },
    "serverPass" : {
      "type" : "string",
      "description" : "Time series database or metrics server password.",
      "default" : "admin"
    },
    "reportInMinutes" : {
      "type" : "integer",
      "description" : "report and reset metrics in minutes.",
      "default" : 1
    },
    "productName" : {
      "type" : "string",
      "description" : "This is the metrics product name for the centralized time series database. The product name will be\nthe top level category under a Kubernetes cluster or a virtual machine. The following is the light-4j\nproduct list. http-sidecar, kafka-sidecar, corp-gateway, aiz-gateway, proxy-server, proxy-client,\nproxy-lambda, light-balancer etc. By default, http-sidecar is used as a placeholder. Please change it\nbased on your usage in the values.yml file.",
      "default" : "http-sidecar"
    },
    "sendScopeClientId" : {
      "type" : "boolean",
      "description" : "A flag to indicate if the scope client id will be sent as a common tag. If it is true, try to retrieve\nit from the audit info and send it if it is not null. If it does not exist, \"unknown\" will be sent.\nBy default, this tag is not sent regardless if it is in the audit info. You only enable this if your\nAPI will be accessed by a Mobile or SPA application with authorization code flow. In this case, the\nprimary token is the authorization code token that contains user info and the secondary scope token\nis the client_credentials token from the immediate caller service in the invocation chain."
    },
    "sendCallerId" : {
      "type" : "boolean",
      "description" : "A flag to indicate if the caller id will be sent as a common tag. If it is true, try to retrieve it\nfrom the audit info and send it if it is not null. If it doesn't exist, \"unknown\" will be sent.\nBy default, this tag is not sent regardless if it is in the audit info. The purpose of this tag is\nsimilar to the scopeClientId to identify the immediate caller service in a microservice application.\nAs the scopeClientId is only available when the scope token is used, it cannot be used for all apps.\nlight-4j client module has a config to enforce all services to send the callerId to the downstream\nAPI, and it can be enforced within an organization. In most cases, this callerId is more reliable."
    },
    "sendIssuer" : {
      "type" : "boolean",
      "description" : "A flag to indicate if the issuer will be sent as a common tag. If it is true, try to retrieve it\nfrom the audit info and send it if it is not null. If it doesn't exist, \"unknown\" will be sent.\nBy default, this tag is not sent regardless if it is in the audit info. This tag should only be\nsent if the organization uses multiple OAuth 2.0 providers. For example, Okta will provide multiple\nvirtual instances, so each service can have its private OAuth 2.0 provider. If all services are\nsharing the same OAuth 2.0 provide (same issuer in the token), this tag should not be used."
    },
    "issuerRegex" : {
      "type" : "string",
      "description" : "If issuer is sent, it might be necessary to extract only partial of the string with a regex pattern.\nFor example, Okta iss is something like: \"https://networknt.oktapreview.com/oauth2/aus9xt6dd1cSYyRPH1d6\"\nWe only need to extract the last part after the last slash. The following default regex is just for it.\nThe code in the light-4j is trying to extract the matcher.group(1) and there is a junit test to allow\nusers to test their regex. If you are using Okat, you can set metrics.issuerRegex: /([^/]+)$\nBy default, the regex is empty, and the original iss will be sent as a tag."
    }
  }
}