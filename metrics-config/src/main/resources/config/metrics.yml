# Metrics handler configuration that is shared by all the push metrics handlers.

# If metrics handler is enabled or not. Default is true as long as one of the handlers is in the
# request/response chain.
enabled: ${metrics.enabled:true}
# If metrics handler is enabled for JVM MBean or not. If enabled, the CPU and Memory usage will be
# collected and send to the time series database.
enableJVMMonitor: ${metrics.enableJVMMonitor:false}
# Time series database server protocol. It can be http or https. Others can be added upon request.
serverProtocol: ${metrics.serverProtocol:http}
# Time series database or metrics server hostname.
serverHost: ${metrics.serverHost:localhost}
# Time series database or metrics server request path. It is optional and only some metrics handlers
# will use it. For example, the Broadcom APM metrics server needs the path to access the agent.
serverPath: ${metrics.serverPath:/apm/metricFeed}
# Time series database or metrics server port number.
serverPort: ${metrics.serverPort:8086}
# Time series database name.
serverName: ${metrics.serverName:metrics}
# Time series database or metrics server user.
serverUser: ${metrics.serverUser:admin}
# Time series database or metrics server password.
serverPass: ${metrics.serverPass:admin}
# report and reset metrics in minutes.
reportInMinutes: ${metrics.reportInMinutes:1}
# This is the metrics product name for the centralized time series database. The product name will be
# the top level category under a Kubernetes cluster or a virtual machine. The following is the light-4j
# product list. http-sidecar, kafka-sidecar, corp-gateway, aiz-gateway, proxy-server, proxy-client,
# proxy-lambda, light-balancer etc. By default, http-sidecar is used as a placeholder. Please change it
# based on your usage in the values.yml file.
productName: ${metrics.productName:http-sidecar}
# A flag to indicate if the scope client id will be sent as a common tag. If it is true, try to retrieve
# it from the audit info and send it if it is not null. If it does not exist, "unknown" will be sent.
# By default, this tag is not sent regardless if it is in the audit info. You only enable this if your
# API will be accessed by a Mobile or SPA application with authorization code flow. In this case, the
# primary token is the authorization code token that contains user info and the secondary scope token
# is the client_credentials token from the immediate caller service in the invocation chain.
sendScopeClientId: ${metrics.sendScopeClientId:false}
# A flag to indicate if the caller id will be sent as a common tag. If it is true, try to retrieve it
# from the audit info and send it if it is not null. If it doesn't exist, "unknown" will be sent.
# By default, this tag is not sent regardless if it is in the audit info. The purpose of this tag is
# similar to the scopeClientId to identify the immediate caller service in a microservice application.
# As the scopeClientId is only available when the scope token is used, it cannot be used for all apps.
# light-4j client module has a config to enforce all services to send the callerId to the downstream
# API, and it can be enforced within an organization. In most cases, this callerId is more reliable.
sendCallerId: ${metrics.sendCallerId:false}
# A flag to indicate if the issuer will be sent as a common tag. If it is true, try to retrieve it
# from the audit info and send it if it is not null. If it doesn't exist, "unknown" will be sent.
# By default, this tag is not sent regardless if it is in the audit info. This tag should only be
# sent if the organization uses multiple OAuth 2.0 providers. For example, Okta will provide multiple
# virtual instances, so each service can have its private OAuth 2.0 provider. If all services are
# sharing the same OAuth 2.0 provide (same issuer in the token), this tag should not be used.
sendIssuer: ${metrics.sendIssuer:false}
# If issuer is sent, it might be necessary to extract only partial of the string with a regex pattern.
# For example, Okta iss is something like: "https://networknt.oktapreview.com/oauth2/aus9xt6dd1cSYyRPH1d6"
# We only need to extract the last part after the last slash. The following default regex is just for it.
# The code in the light-4j is trying to extract the matcher.group(1) and there is a junit test to allow
# users to test their regex. If you are using Okat, you can set metrics.issuerRegex: /([^/]+)$
# By default, the regex is empty, and the original iss will be sent as a tag.
issuerRegex: ${metrics.issuerRegex:}
